//http://localhost:5000/
const mockData = require("./mock-data");
const express = require("express");
const cors = require("cors");
const app = express();
const port = process.env.PORT || 5000;
// For parsing application/json
app.use(express.json());

app.use(cors({ origin: "http://localhost:3000" }));
// This displays message that the server running and listening to specified port
app.listen(port, () => console.log(`Listening on port ${port}`));

// *****************DRIVERS********************
// GET DRIVERS
app.get("/drivers", (req, res) => {
  res.json({ drivers: mockData.drivers });
});
// Get a single driver based on id
app.get("/drivers/:id", (req, res) => {
  const driver = mockData.drivers.find(
    (item) => item.id === Number(req.params.id)
  );
  if (driver) {
    res.json(driver);
  } else {
    console.log(`in server get single`);
    res.sendStatus(404);
  }
});

// POST - Add new driver
app.post("/drivers", (req, res) => {
  let drivers = mockData.drivers;
  const data = req.body;
  console.log(`In server add-post new id: ${drivers.length}`);
  drivers.push({
    id: drivers.length,
    firstName: data.first_name,
    lastName: data.last_name,
    phone: data.phone,
    distributionArea: data.distribution_area,
  });
  res.json(drivers);
});

// PUT - update a driver
app.put("/drivers/:id", (req, res) => {
  // const driver = req.body.json()
  let drivers = mockData.drivers;
  const data = req.body;
  const driver = drivers.find((item) => item.id === Number(data.id));
  drivers[drivers.indexOf(driver)].firstName = data.first_name;
  drivers[drivers.indexOf(driver)].lastName = data.last_name;
  drivers[drivers.indexOf(driver)].phone = data.phone;
  drivers[drivers.indexOf(driver)].distributionArea = data.distribution_area;

  if (driver) {
    res.json(drivers);
  } else {
    console.log(`in server get single`);
    res.sendStatus(404);
  }
});

// DELETE DRIVER
app.delete("/drivers/:id", (req, res) => {
  let drivers = mockData.drivers;
  const data = req.params;
  const driverToDelete = drivers.find((item) => item.id === Number(data.id));

  drivers.splice(drivers.indexOf(driverToDelete), 1);
  res.json(drivers);
});

// ******************ADDRESSES*****************
// GET ADDRESSES
app.get("/addresses", (req, res) => {
  res.json({ addresses: mockData.addresses });
});
// Get a single address based on id
app.get("/addresses/:id", (req, res) => {
  const address = mockData.addresses.find(
    (item) => item.id === Number(req.params.id)
  );

  if (address) {
    res.json(address);
  } else {
    res.sendStatus(404);
  }
});

// POST - ADD new address
app.post("/addresses", (req, res) => {
  let addresses = mockData.addresses;
  const data = req.body;
  addresses.push({
    id: addresses.length,
    city: data.city,
    address: data.address,
    deliveryType: data.delivery_type,
    frequency: data.frequency,
    recipientName: data.recipient_name,
    recipientPhone: data.recipient_phone,
  });
  res.json(addresses);
});

// PUT -UPDATE an address
app.put("/addresses/:id", (req, res) => {
  let addresses = mockData.addresses;
  let data = req.body;
  // console.log(req);
  // console.log(req.body);
  console.log(`Server updated data is: ${data}`);
  console.log(data.city);
  console.log(data.id);
  const address = addresses.find((item) => item.id === Number(data.id));
  console.log(address);
  console.log(addresses[addresses.indexOf(address)].city);
  //console.log(address);
  addresses[addresses.indexOf(address)].city = data.city;
  addresses[addresses.indexOf(address)].address = data.address;
  addresses[addresses.indexOf(address)].deliveryType = data.delivery_type;
  addresses[addresses.indexOf(address)].frequency = data.frequency;
  addresses[addresses.indexOf(address)].recipientName = data.recipient_name;
  addresses[addresses.indexOf(address)].recipientPhone = data.recipient_phone;

  if (address) {
    res.json(addresses);
  } else {
    res.sendStatus(404);
  }
});

// DELETE ADDRESS
app.delete("/addresses/:id", (req, res) => {
  let addresses = mockData.addresses;
  const data = req.params;
  const addressToDelete = addresses.find((item) => item.id === Number(data.id));
  addresses.splice(addresses.indexOf(addressToDelete), 1);
  res.json(addresses);
});

//****** Explainations******
// ****** Number 1*******
// RESTful API
// GET, PUT, DELETE, POST
// Get all drivers / single driver:
//  1. get all drivers: /drivers
//  2. get specific driver /drivers/{id}

// POST - create new driver
// 3. post to  /drivers - in request body - driver details

// PUT - update driver details
// 4. put to /drivers/{id} - in request body - driver details

// DELETE - delete single driver
// 5. delete to /drivers/{id}

// ************** Number 2**************
// RESTful API
// GET: (read entities)
// -- all drivers: /drivers
// -- specific driver: /drivers/:id

// POST: (new entity)
// -- add new driver (driver json in request body): /drivers

// PUT: (update entity)
// -- update existing driver (driver json in request body): /drivers/:id

// DELETE: (delete entity)
// -- delete existing user: /drivers/:id

/******prelog for RESTful APIs - must read******
const schoolsRoute = app.route("/schools");
schoolsRoute.get(() => {});
schoolsRoute.get("/:id", () => {});
schoolsRoute.post(() => {});
schoolsRoute.put("/:id", () => {});
schoolsRoute.delete("/:id", () => {});

const studentsRoute = schoolsRoute.route("/:id/students"); // /schools/:id/students
studentsRoute.get(() => {}); // get all students in school :id
studentsRoute.get("/:id", () => {}); // get specific student from a specific school
studentsRoute.post(() => {}); // add new student to a school
studentsRoute.put("/:id", () => {}); // update student in school
studentsRoute.delete("/:id", () => {}); // remove student from school
*/
